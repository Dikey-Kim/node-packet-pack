var primitive=require("./handler"),byteArray=require("../extends/byteArrayHandler"),byteSplit=require("../extends/byteSplitHandler");function Data(b){this.buf=this.ognl=b;this.obj={}}function Byte(b){this.src=b;this.desc=Object.create(b);this.bufArray=[]}function Parser(b){this.map=b;this.handlers={};for(var c in primitive)this.handlers[c]=primitive[c];this.handlers[byteArray.getType()]=byteArray;this.handlers[byteSplit.getType()]=byteSplit}
Parser.prototype.addHandle=function(b){this.handlers[b.getType()]=b};
Parser.prototype.parse=function(b,c){var d=new Data(b),a,e;for(e in this.map){a=this.map[e];if(!this.handlers[a.type]&&!a.ignore)return console.log(a.name+" ==> "+a.type+"-parse call"),c(Error("["+a.name+":"+a.type+"] => Unsupport Handler"));try{this.handlers[a.type].handle.call(d,a.name,a)}catch(f){return console.log("["+a.name+":"+a.type+"] => Parsing Error("+f.message+")"),c(Error("["+a.name+":"+a.type+"] => Parsing Error("+f.message+")"))}}return c(null,d.obj,d.buf)};
Parser.prototype.unparse=function(b,c){var d=new Byte(b),a,e;for(e in this.map){a=this.map[e];if((void 0===b[a.name]||null===b[a.name])&&!a.ignore)return c(Error("No Exist Attribute ["+a.name+"]"));try{this.handlers[a.type].unhandle.call(d,a.name,a)}catch(f){return console.log("["+a.name+":"+a.type+"] => Unparsing Error("+f.message+")"),c(Error("["+a.name+":"+a.type+"] => Unparsing Error("+f.message+")"))}}c(null,Buffer.concat(d.bufArray),b)};Parser.prototype.next=function(){return this._next};
module.exports=Parser;